 EXPRESSÕES DE TIPO EM C++

Dado o código
int i[10];
auto p = new int[10];
int a[20];

Qual o tipo de i? R: int[10]
Qual o tipo de p? R: *int[10]
Qual o tipo de conteúdo de p? R: int[10]

Para inicializar o i -> int i[10] = {1,2,3,4,5,6,7,8,9,10}; Em C++ não é necessário o "=", pode-se ser escrito da seguinte maneira int v[] = {1,2,3,4}. Neste caso ele retornará um int[4]. Outra forma que pode ser escrita é:

auto p = new int[]{1,2,3,4};

size_t é mesma coisa que using size_t = unsigned long long

lico ou lowmajor -> ela serve para armazenar códigos com formato de matriz. Para Pascal é collum major Ex:

a11 a12
a21 a22
a31 a32

Em C++ ele é declarada como a11 a12|a21 a22|a31 a32 (Fim do exemplo)

Para a declaração de matriz -> int a[3][2]; que é int[3][2]

Para achar uma matriz a[1][1] o código lê da seguinte maneira p[r*2+c] logo ele acha a posição de a[1][1]

Para inicialização de matriz. Ex:

int a[3][2]{{1,2}, {3,4}, {5,6}};

Outra forma de inicializar

int a[][2]{{1,2}, {3,4}, {5,6}}; É NECESSÁRIO INICIALIZAR O SEGUNDO, justamente pela forma de busca do compilador do C++ que é p[r*2+c] onde r é o 2.(Fim do exemplo)

Em C++ não se pode devolver um array e nem uma função devolver uma função, porém array pode aparecer como parâmentro de uma função. Ex:

void f(int i[10]) -> nesta parte, como parâmetro, ele há um decaimento e passa de ser um vetor para um ponteiro
{

}
(Fim do exemplo)

Quando declarado um array por parâmetro, esse array decai para um ponteiro. Nunca se usa um array cru como parâmetro.

Em:
int a[20];
auto x = a; -> é um *int

Em:
auto p = new int[]{1, 2, 3, 4}
auto w = *p; -> Seu tipo é int e ele irá pegar o primeiro elemento do vetor

*-> antes do nome do objeto a ser nomeado
[]-> após o nome do objeto

Nomenclatura:
int* p1;-> ponteiro de inteiro
int* p2[10]; -> array de 10 de ponteiro de inteiro
int** p3[10]; -> array de 10 de ponteiro de ponteiro para inteiro
int* (*p4)[10]; -> ponteiro de p4 para um array 10 para ponteiro de inteiro
int* (*p5[10])[10]; -> array de 10 de ponteiro para array 10 de ponteiro de inteiro. Seu tipo é int*(*[10])[10]
int* p6(); -> função de ponteiro de inteiro. Seu tipo é int*(). Em auto x=p6; -> ele decai para um endereço de ponteiro, ou seja, x = &p6;
int* (*p7)(); -> ponteiro de função de ponteiro de inteiro. um ponteiro eleva, ou seja (*p7)() = p7();
int* (*p8[10])(); -> array de 10 de ponteiro de função de ponteiro
cont int* p11; -> ponteiro de inteiro constante. Neste caso vc pode fazer p11 = &a, porém não pode fazer *p11 = 2;
int* const p12 = &a; -> constante de ponteiro de inteiro. Ele faz o contrário do de cima
const int* const p13 = &a; -> constante de ponteiro de inteiro de constante. Ele não deixa mudar nada.

()-> serve para denominar precedência ou função

RECEITA 2
Referância lvalue
