Neste trabalho será implementando funções embutidas. Elas são:

- function A = zeros(m, n) => Em soma de escalar com matriz, o escalar é somado em todos os elementos da matriz.
- function A = ones(m, n) => Devolve uma matriz com todos os elementos com 1
- function A = eye(n) => Devolve uma matriz quadrada identidade
- function A = diag(d) => Devolve uma matriz quadrada com o vetor "d" na diagonal principal (da esquerda para direita) (lembrando que 1:5 significa numeros de 1 até 5 que, por default, terá uma soma de 1 em 1)
- Não se pode passar matriz 1, somente de 2 ou mais
- function [idx, d2] = knn(X, p, n) => X é uma matriz cujas colunas são dimensões, p é um ponto dedimencional ele possui um numero de elementos igual a coluna de X e n irá procurar os numeros mais próximos de p. Ele devolve um vetor contendo os índices, caso ele seja chamado individualmente.
Ex: idx = knn(A, b, 10) => neste caso só estamos interessados somente no idx
    [idx,  d2] = knn(A, b, 10) => Neste caso devolve os 2 índices.
    
Para achar a função, primeiramente é necessário que ele esteje na tabela de símbolos. Para isso tem que mexer mais em Header Files > symbol > Function.h
Tem que mexer no function declaretion cpp, tem que resolver a linha 49, tem q verificar se há um mesmo escopo com nome igual e verificar se não há parâmetros replicados. No Function Declaration.cpp Na funsão resolve, na linha 49 têm que se criar uma forma dele verificar se não há parâmetrou e nomes iguais. ast/FunctionDeclaration

(1) Mexer no ast/FunctionDeclaration E/OU symbol/Function

(2) ast/Reference criar chamar função no método de resolução(*)

(3) Alterar ast/Assignment(#) na função execute

(4) Na calc: Inicialização de funções nativas


Function Frame ou registro de ativação é uma área na memória que amntém a entrada, os dados e a saída de uma função.
Criar um function frame que toma dois argumentos inteiros, num de param de entrada e nem param de saida e sua função nativa devolve com ponteiro para frame function

função nativa pode ser std::function<void(FrameFunction*)>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Continuação

reference.cpp linha 120 // Avaliar a chamada de função. Criar um frame a função a ser executada, chamara função que irá executar a referência. Terá que deletar o rame criado, ela irá devolver um valor. Ela tem que possuir as entradas da função e as saídas. Ex: 4 saídas e 3 entradas, prioridade da primeira saída

Assignnment.cpp linha 46 // Modificar para referência quando somente é dita
Assignnment.cpp linha 54 // Dizer se existe uma referência ou não
  _reference = dynamic_cast<Reference*>(_expression.get()); // dynamic_cast irá devolver um nullpointer caso ele não seja uma referência

Assignment.cpp linha 133 
if(_reference)
	  if (auto function = _reference->function) 
	  {
		  // efetuar uma chamada de function de forma similiar a de referência. Em seguida setar o valor de cada referência de lhs com o valor correspondente da saída da função que irá estar disponível no frame
		  frame = 
		  return NEXT;
	  }
